{"version":3,"sources":["webpack:///./src/sources/app.js","webpack:///./src/components/data/loading/AppSpinner.js","webpack:///./src/components/data/AppQuery.js","webpack:///./src/components/Event.js","webpack:///./src/pages/index.js","webpack:///./src/layouts/landing/AppContainer.js","webpack:///./src/layouts/landing/AppNavBar.js","webpack:///./src/layouts/landing/AppFooter.js","webpack:///./src/layouts/landing/LandingLayout.js"],"names":["cache","app_link","apollo_link_lib","a","from","Object","apollo_link_persisted_queries_lib","useGETForHashedQueries","lib","uri","fetch","fetch_npm_browserify_default","inMemoryCache","restore","window","__APOLLO_STATE__","e","app","ApolloClient","link","StyledSpinner","styled_components_browser_es","default","svg","withConfig","displayName","loading_AppSpinner","react_default","createElement","AppQuery_AppQuery","render","_this","this","react_apollo_browser_umd","ApolloProvider","client","Query","query","props","pollInterval","refetch","_ref","loading","error","data","noSpinner","react","Component","_","n","A","Container","div","Image","img","components_Event","name","image","id","src","key","pages_Landing","LandingLayout","src_default","_templateObject","style","color","serverReady","_templateObject2","_ref2","getCurrentCalgaryEvents","map","_ref3","237","t","r","l","i","o","c","u","s","landing_AppContainer","dist","Box","assign","mx","css","padding","maxWidth","p","d","Nav","nav","NavItem","AppNavBar_AppNavBar","Flex","justifyContent","alignItems","flexWrap","width","gatsby_link_default","to","AppFooter_AppFooter","textAlign","g","theme","space","breakpoints","LandingLayout_LandingLayout","ThemeProvider","Helmet_default","defaultTitle","titleTemplate","content","lang","children"],"mappings":"4GAkBIA,sIAXEC,EAAOC,EAAAC,EAAWC,MAEtBC,OAAAC,EAAAH,EAAAE,EAA2BE,4BAE3BF,OAAAG,EAAAL,EAAAE,EACEI,IAAK,+BACLC,MAAAC,EAAAR,MAMJ,IACEH,OAAYY,EAAAT,GAAgBU,QAAQC,OAAOC,sBAC3C,MAAOC,GACPhB,EAAQ,IAAIY,EAAAT,EAGd,IAKAc,EALkB,IAAIC,EAAAf,GACpBgB,KAAMlB,EACND,mBCXIoB,EAAgBC,EAAAC,QAAOC,IAAvBC,YAAAC,YAAA,6BAAgBJ,EAAhB,2ZA8BNK,EA3CmB,kBACjBC,EAAAxB,EAAAyB,cAACR,EAAD,OCEmBS,4FACnBC,kBAAS,IAAAC,EAAAC,KACP,OACEL,EAAAxB,EAAAyB,cAACK,EAAAC,gBAAeC,OAAQlB,GACtBU,EAAAxB,EAAAyB,cAACK,EAAAG,OACCC,MAAOL,KAAKM,MAAMD,MAClBE,aAAcP,KAAKM,MAAMC,cAAgB,EACzCC,QAASR,KAAKM,MAAME,SAEnB,SAAAC,GAAuC,IAApCC,EAAoCD,EAApCC,QAASC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,KAAMJ,EAAcC,EAAdD,QACxB,OAAIE,IAAYX,EAAKO,MAAMO,UAAkBlB,EAAAxB,EAAAyB,cAACF,EAAD,MACzCiB,EAAchB,EAAAxB,EAAAyB,cAAA,+CACXG,EAAKO,MAAMR,QAASY,UAASC,QAAOC,OAAMJ,kBAZxCX,CAAiBiB,EAAAC,WAAAC,GAAAC,EAAA,KAAAA,EAAA,MAAAC,EAAAD,IAAAD,GCHhCG,EAAY9B,EAAAC,QAAO8B,IAAnB5B,YAAAC,YAAA,oBAAYJ,EAAZ,yBAIAgC,EAAQhC,EAAAC,QAAOgC,IAAf9B,YAAAC,YAAA,gBAAQJ,EAAR,6BAcNkC,EATc,SAAAd,GAAyB,IAAtBe,EAAsBf,EAAtBe,KAAMC,EAAgBhB,EAAhBgB,MAAOC,EAASjB,EAATiB,GAC5B,OACE/B,EAAAxB,EAAAyB,cAACuB,EAAD,KACExB,EAAAxB,EAAAyB,cAACyB,GAAMM,IAAKF,EAAOG,IAAKF,IACxB/B,EAAAxB,EAAAyB,cAAA,UAAK4B,uaCRUK,4FACnB/B,kBACE,OACEH,EAAAxB,EAAAyB,cAACkC,EAAA3D,EAAD,KACEwB,EAAAxB,EAAAyB,cAAA,WACED,EAAAxB,EAAAyB,cAAA,kEACAD,EAAAxB,EAAAyB,cAACC,GACCQ,MAAO0B,IAAPC,KAKAlC,OAAQ,SAAAW,GAAA,IAAGG,EAAHH,EAAGG,KAAH,OACNjB,EAAAxB,EAAAyB,cAAA,QAAMqC,OAASC,MAAOtB,GAAQ,UAA9B,qBACqBA,EAAKuB,YAD1B,SAML,IACA,IACDxC,EAAAxB,EAAAyB,cAAA,iFAGAD,EAAAxB,EAAAyB,cAAA,iFAGAD,EAAAxB,EAAAyB,cAACC,GACCQ,MAAO0B,IAAPK,KASAtC,OAAQ,SAAAuC,GAAA,OAAAA,EAAGzB,KACJ0B,wBAAwBC,IAAI,SAAAC,GAAyB,IAAtBd,EAAsBc,EAAtBd,GAAIF,EAAkBgB,EAAlBhB,KAAMC,EAAYe,EAAZf,MAC5C,OAAO9B,EAAAxB,EAAAyB,cAAC2B,GAAMC,KAAMA,EAAMC,MAAOA,EAAOG,IAAKF,aAvCtCG,CAAgBf,EAAAC,YAAA0B,IAAA,SAAAzD,EAAA0D,EAAAzB,GAAA,iBAAA9C,EAAA8C,EAAA,IAAA0B,EAAA1B,IAAA9C,GAAAyE,EAAA3B,EAAA,GAAA4B,EAAA5B,IAAA2B,GAAAE,EAAA7B,EAAA,KAAA8B,EAAA9B,EAAA,KAAA+B,EAAA/B,IAAA8B,GAAAE,EAAAhC,EAAA,KCKrCiC,SAVqB,SAAA5C,GAAA,OACnBX,EAAAxB,EAAAyB,cAACuD,EAAAC,IAAD/E,OAAAgF,UACM/C,GACJgD,GAAG,OACHC,KACEC,QAAS,OACTC,SAAU,eAAAC,EAAAzC,EAAA,KAAA0C,EAAA1C,IAAAyC,GCFVE,EAAMvE,EAAAC,QAAOuE,IAAbrE,YAAAC,YAAA,kBAAMJ,EAAN,gCAIAyE,EAAUzE,EAAAC,QAAO8B,IAAjB5B,YAAAC,YAAA,sBAAUJ,EAAV,KAEe0E,4FACnBjE,kBACE,OACEH,EAAAxB,EAAAyB,cAACgE,EAAD,KACEjE,EAAAxB,EAAAyB,cAACsD,EAAD,KACEvD,EAAAxB,EAAAyB,cAACuD,EAAAa,MACCC,eAAgB,SAChBC,WAAY,SACZC,SAAU,QAEVxE,EAAAxB,EAAAyB,cAACuD,EAAAC,KAAIgB,MAAO,IACVzE,EAAAxB,EAAAyB,cAACkE,EAAD,KACEnE,EAAAxB,EAAAyB,cAACyE,EAAAlG,GAAKmG,GAAI,KAAV,cAGJ3E,EAAAxB,EAAAyB,cAACuD,EAAAC,KAAIgB,MAAO,IACVzE,EAAAxB,EAAAyB,cAACkE,EAAD,KACEnE,EAAAxB,EAAAyB,cAACyE,EAAAlG,GAAKmG,GAAI,UAAV,eAAA5B,EAjBKqB,CAAkBjD,EAAAC,WCVlBwD,4FACnBzE,kBACE,OACEH,EAAAxB,EAAAyB,cAAA,WACED,EAAAxB,EAAAyB,cAACuD,EAAAa,MACC/B,OAASuC,UAAW,UACpBP,eAAgB,SAChBC,WAAY,SACZC,SAAU,QAEVxE,EAAAxB,EAAAyB,cAACuD,EAAAC,KAAIgB,OAAQ,EAAG,GAAO,MACvBzE,EAAAxB,EAAAyB,cAACuD,EAAAC,KAAIgB,OAAQ,EAAG,GAAO,SAAA1B,EAXZ6B,CAAkBzD,EAAAC,WAAAE,EAAA0C,EAAAjB,EAAA,sBAAA+B,ICMvC,IAAMC,GACJC,OAAQ,EAAG,EAAG,GAAI,GAAI,IACtBC,aAAc,OAAQ,OAAQ,SAGXC,4FACnB/E,kBACE,OACEH,EAAAxB,EAAAyB,cAACP,EAAAyF,eAAcJ,MAAOA,GACpB/E,EAAAxB,EAAAyB,cAAA,WACED,EAAAxB,EAAAyB,cAACmF,EAAA5G,GACC6G,aAAA,eACAC,cAAA,qBAEAtF,EAAAxB,EAAAyB,cAAA,QAAM4B,KAAK,eAAe0D,QAAQ,iBAClCvF,EAAAxB,EAAAyB,cAAA,QAAM4B,KAAK,UAAU0D,QAAQ,YAC7BvF,EAAAxB,EAAAyB,cAAA,QAAM4B,KAAK,eAAe0D,QAAQ,gBAClCvF,EAAAxB,EAAAyB,cAAA,QAAMuF,KAAK,QAEbxF,EAAAxB,EAAAyB,cAACmE,EAAD,MACApE,EAAAxB,EAAAyB,cAACsD,EAAD,KACEvD,EAAAxB,EAAAyB,cAAA,WAAMI,KAAKM,MAAM8E,UACjBzF,EAAAxB,EAAAyB,cAAC2E,EAAD,UAAA7B,EAjBSmC,CAAsB/D,EAAAC","file":"component---src-pages-index-js-0d73206c36b1b3b8c274.js","sourcesContent":["import { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { createPersistedQueryLink } from 'apollo-link-persisted-queries'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { ApolloLink } from 'apollo-link'\r\nimport fetch from 'isomorphic-fetch'\r\n\r\nconst link = ApolloLink.from([\r\n  // CDN's cache get requests, since apollo client usually sends post requests we can change this\r\n  createPersistedQueryLink({ useGETForHashedQueries: true }),\r\n  // use proxy url. This allows very little difference between dev and production config\r\n  createHttpLink({\r\n    uri: '/.netlify/functions/graphql/',\r\n    fetch,\r\n  }),\r\n])\r\n\r\n// set cache restore if running on a browser\r\nlet cache\r\ntry {\r\n  cache = new InMemoryCache().restore(window.__APOLLO_STATE__ || {})\r\n} catch (e) {\r\n  cache = new InMemoryCache()\r\n}\r\n\r\nconst AppClient = new ApolloClient({\r\n  link: link,\r\n  cache,\r\n})\r\n\r\nexport default AppClient\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst AppSpinner = () => (\r\n  <StyledSpinner>\r\n    {/* <circle\r\n      className=\"path\"\r\n      cx=\"25\"\r\n      cy=\"25\"\r\n      r=\"20\"\r\n      fill=\"none\"\r\n      strokeWidth=\"4\"\r\n    /> */}\r\n  </StyledSpinner>\r\n)\r\n\r\nconst StyledSpinner = styled.svg`\r\n  width: 40px;\r\n  height: 40px;\r\n  background-color: #333;\r\n\r\n  border-radius: 100%;\r\n  -webkit-animation: sk-scaleout 1s infinite ease-in-out;\r\n  animation: sk-scaleout 1s infinite ease-in-out;\r\n  @-webkit-keyframes sk-scaleout {\r\n    0% {\r\n      -webkit-transform: scale(0);\r\n    }\r\n    100% {\r\n      -webkit-transform: scale(1);\r\n      opacity: 0;\r\n    }\r\n  }\r\n\r\n  @keyframes sk-scaleout {\r\n    0% {\r\n      -webkit-transform: scale(0);\r\n      transform: scale(0);\r\n    }\r\n    100% {\r\n      -webkit-transform: scale(1);\r\n      transform: scale(1);\r\n      opacity: 0;\r\n    }\r\n  }\r\n`\r\nexport default AppSpinner\r\n","import React, { Component } from 'react'\r\nimport { Query } from 'react-apollo'\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport AppClient from '../../sources/app'\r\nimport AppSpinner from './loading/AppSpinner'\r\n\r\nexport default class AppQuery extends Component {\r\n  render() {\r\n    return (\r\n      <ApolloProvider client={AppClient}>\r\n        <Query\r\n          query={this.props.query}\r\n          pollInterval={this.props.pollInterval || 0}\r\n          refetch={this.props.refetch}\r\n        >\r\n          {({ loading, error, data, refetch }) => {\r\n            if (loading && !this.props.noSpinner) return <AppSpinner />\r\n            if (error) return <div>Error loading... try again later</div>\r\n            return this.props.render({ loading, error, data, refetch })\r\n          }}\r\n        </Query>\r\n      </ApolloProvider>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  border-style: outset;\n`\n\nconst Image = styled.img`\n  width: 125px;\n  height: auto;\n`\n\nconst Event = ({ name, image, id }) => {\n  return (\n    <Container>\n      <Image src={image} key={id} />\n      <h3>{name}</h3>\n    </Container>\n  )\n}\n\nexport default Event\n","import React, { Component } from 'react'\r\nimport LandingLayout from '../layouts/landing/LandingLayout'\r\nimport AppQuery from '../components/data/AppQuery'\r\nimport { Flex, Box } from 'grid-styled'\r\nimport gql from 'graphql-tag'\r\n\r\nimport Event from '../components/Event'\r\n\r\nexport default class Landing extends Component {\r\n  render() {\r\n    return (\r\n      <LandingLayout>\r\n        <div>\r\n          <p>Let's query our lambda server to see if it is working</p>\r\n          <AppQuery\r\n            query={gql`\r\n              query {\r\n                serverReady\r\n              }\r\n            `}\r\n            render={({ data }) => (\r\n              <span style={{ color: data && 'green' }}>\r\n                Server response: \"{data.serverReady}\"\r\n              </span>\r\n            )}\r\n          />\r\n        </div>\r\n        {'\\u00A0'}\r\n        {'\\u00A0'}\r\n        <p>\r\n          Now lets access data from an external api through our lambda server.\r\n        </p>\r\n        <p>\r\n          Events happening in Calgary Alberta (Data from https://showpass.com)\r\n        </p>\r\n        <AppQuery\r\n          query={gql`\r\n            query {\r\n              getCurrentCalgaryEvents {\r\n                id\r\n                name\r\n                image\r\n              }\r\n            }\r\n          `}\r\n          render={({ data }) =>\r\n            data.getCurrentCalgaryEvents.map(({ id, name, image }) => {\r\n              return <Event name={name} image={image} key={id} />\r\n            })\r\n          }\r\n        />\r\n      </LandingLayout>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport { Box } from 'grid-styled'\n\nconst AppContainer = props => (\n  <Box\n    {...props}\n    mx=\"auto\"\n    css={{\n      padding: '15px',\n      maxWidth: '1024px',\n    }}\n  />\n)\nexport default AppContainer\n","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Box } from 'grid-styled'\r\nimport Link from 'gatsby-link'\r\n\r\nimport AppContainer from './AppContainer'\r\n\r\nconst Nav = styled.nav`\r\n  width: 100%;\r\n  background: #eee;\r\n`\r\nconst NavItem = styled.div``\r\n\r\nexport default class AppNavBar extends Component {\r\n  render() {\r\n    return (\r\n      <Nav>\r\n        <AppContainer>\r\n          <Flex\r\n            justifyContent={'center'}\r\n            alignItems={'center'}\r\n            flexWrap={'wrap'}\r\n          >\r\n            <Box width={1 / 2}>\r\n              <NavItem>\r\n                <Link to={'/'}>|MySite|</Link>\r\n              </NavItem>\r\n            </Box>\r\n            <Box width={1 / 2}>\r\n              <NavItem>\r\n                <Link to={'/about'}>about</Link>\r\n              </NavItem>\r\n            </Box>\r\n          </Flex>\r\n        </AppContainer>\r\n      </Nav>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport { Flex, Box } from 'grid-styled'\n\nexport default class AppFooter extends Component {\n  render() {\n    return (\n      <div>\n        <Flex\n          style={{ textAlign: 'center' }}\n          justifyContent={'center'}\n          alignItems={'center'}\n          flexWrap={'wrap'}\n        >\n          <Box width={[1, 1 / 2, 1 / 2]} />\n          <Box width={[1, 1 / 2, 1 / 2]} />\n        </Flex>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport Helmet from 'react-helmet'\r\nimport { Flex, Box } from 'grid-styled'\r\n\r\nimport AppContainer from './AppContainer'\r\nimport AppNavBar from './AppNavBar'\r\nimport AppFooter from './AppFooter'\r\n\r\nconst theme = {\r\n  space: [0, 6, 12, 18, 24],\r\n  breakpoints: ['32em', '48em', '64em'],\r\n}\r\n\r\nexport default class LandingLayout extends Component {\r\n  render() {\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <div>\r\n          <Helmet\r\n            defaultTitle={`EXAMPLE SITE`}\r\n            titleTemplate={`%s | EXAMPLE SITE`}\r\n          >\r\n            <meta name=\"twitter:site\" content=\"@EXAMPLESITE\" />\r\n            <meta name=\"og:type\" content=\"website\" />\r\n            <meta name=\"og:site_name\" content=\"EXAMPLESITE\" />\r\n            <html lang=\"en\" />\r\n          </Helmet>\r\n          <AppNavBar />\r\n          <AppContainer>\r\n            <div>{this.props.children}</div>\r\n            <AppFooter />\r\n          </AppContainer>\r\n        </div>\r\n      </ThemeProvider>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}